/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, Decal, RenderTexture, Text, PerspectiveCamera } from '@react-three/drei'
import { type GLTF } from 'three-stdlib'
import model from '/models/room/door.glb?url'
import { useFrame } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    OBJ_1: THREE.Mesh
    OBJ_2: THREE.Mesh
  }
  materials: {
    Wood: THREE.MeshPhysicalMaterial
    Brass_A_5: THREE.MeshPhysicalMaterial
  }
}

const SCALE = 50;

export function RedrumDoor(props: JSX.IntrinsicElements['group']) {
    const { nodes, materials } = useGLTF(model) as GLTFResult
    // const textRef = useRef()
    // useFrame((state) => (textRef.current.position.x = Math.sin(state.clock.elapsedTime) * 1))
    //-3.15531 m
    //-2.63777 m
  return (
    <group {...props} dispose={null}>
      <group position={[1.65, 1.02, -2.63]} rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
              <mesh
                  castShadow
                  receiveShadow
                  geometry={nodes.OBJ_1.geometry}
                  material={materials.Wood}
              >
                  {/* <planeGeometry args={[3.6 * 1000, 3.6* 1000]}></planeGeometry> */}
                  <Decal
                    // debug
                    position={[0, 0, 0.7 * SCALE]}
                    rotation={[-Math.PI / 2, Math.PI, 0]}
                    scale={[1 * SCALE, 2 * SCALE, 1 * SCALE]}
                  >
                      <meshStandardMaterial roughness={1} transparent polygonOffset polygonOffsetFactor={-1}>
                          <RenderTexture attach="map" anisotropy={16}>
                              <PerspectiveCamera makeDefault manual aspect={1 / 2} rotation={[0, 0, 0]}  position={[0, 0, 2]} />
                              {/* <color attach="background" args={['#af2040']} /> */}
                              <ambientLight intensity={1} />
                              {/* <directionalLight position={[10, 10, 5]} /> */}
                              <Text
                                  position={[0, 0.6, 0]}
                                  rotation={[0, 0, 0]}
                                //   ref={textRef}
                                  fontSize={0.2}
                                  color="red">
                                  Hello
                              </Text>
                              <Text
                                  position={[0, -0.1, 0]}
                                  rotation={[0, 0, 0]}
                                //   ref={textRef}
                                  fontSize={0.07}
                                  color="red">
                                  I am Yiyi, AAAAAA
                              </Text>
                              <Text
                                  position={[0, -0.2, 0]}
                                  rotation={[0, 0, 0]}
                                //   ref={textRef}
                                  fontSize={0.1}
                                  color="red">
                                  I am Yiyi, AAAAAA
                              </Text>
                      </RenderTexture>
                      </meshStandardMaterial>
                    </Decal>
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.OBJ_2.geometry}
          material={materials.Brass_A_5}
        />
      </group>
    </group>
  )
}

useGLTF.preload(model)
